Starting weekly assessment for Ryan, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 90.59 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, maximum_likelihood_estimation, Week10, HPC, Week5, Week2, Week4, .git, Week3, MiniProject

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
__pycache__
*.bbl
*.blg
*.pyc
.Rhistory

#Results**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
README for all CMEECoursework!

Assessment
Week1 - Bash and LATEX week 30/09/19 - 06/10/19
Week2 - Biological Computing in Python I 07/10/19 - 13/10/19
Week3 - Biological Computing in R 14/10/19 - 20/10/19
Week4 - Statistics Week 21/10/19 - 27/10/19
Week5 - GIS Week 28/10/19 - 03/11/19
Week6 - Population Genetics Week 04/11/19 - 10/11/19
Week7 - Biological Computing in Python II 10/11/19 - 17/11/19
Week8 - **********************************************************************

======================================================================
Looking for the weekly directories...

Found 8 weekly directories: Week1, Week10, Week2, Week3, Week4, Week5, Week6, Week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: README.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
Biological Computing in Python II 10/11/19 - 17/11/19

Code

    blackbirds.py
    #!usr/bin/env python3
    """A script showing how regular expressions can be used for text mining of files"""

    DrawFW.py
    #!usr/bin/env python3
    """A script to generate and plot a "synthetic" food web"""

    fmr.R
    
    LV1LV2Profiling.sh
    #!usr/bin/bash
    ###Prifling the two scripts: LV1.py and LV2.py, using bash
    
    LV1.py
    #!usr/bin/env python3
    """A script that plots Lotka-Volterra model: a predator-prey system 
    in 2D space""" 
    
    LV2.py
    #!usr/bin/env python3
    """A script that plots Lotka-Volterra model: a predator-prey system 
    in 2D space"""
    
    MyFirstJupyterNb.ipynd
    
    profileme2.py
    #!usr/bin/env python3
    """A script to show how to time the speeds of an improved profileme2.py script"""
    
    profileme.py
    #!usr/bin/env python3
    """A script to show how to time the speed of the script"""
    
    regexs.py
    #!usr/bin/env python3
    """Regular expressions in Python"""
    
    run_fmr_R.py
    #!usr/bin/env python3
    """Runs fmr.R to generate the desired result and prints to the 
    python screen whether the run was successful, and the contents of 
    the R console output"""
    
    TestR.py
    #!usr/bin/env python3
    """A script that runs R from python, by use of a simple workflow"""
    
    TestR.R 
    
    timeitme.py
    #!usr/bin/env python3
    """A script to time and compare speeds of the functions from 
    profileme.py and profileme2.py. A method that is easy to use and 
    easy to compare the speeds of functions.
    This also illustrates how to use %timeit to do just this"""
    
    using_os.py
    #!usr/bin/env python3
    """A script to obtain specifie lists of directories, sbdirectories 
    and files from in the home directory using subprocess"""

Data

    blackbirds.txt
    NagyEtAl1999.csv
    TestOaksData.csv

README.txt

Results

Sandbox**********************************************************************

Found following files in results directory: TestR.Rout, LV_model2.pdf, LV_model.pdf, DrawFW.pdf, TestR_errFile.Rout...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 17 code files: TestR.py, regexs.py, profileme2.py, timeitme.py, blackbirds.py, LV1LV2Profiling.sh, TestR.R, profileme.py, fmr.R, MyFirstJupyterNb.ipynb, using_os.py, LV1.py, DrawFW.py, run_fmr_R.py, LV2.py, MyFirstJupyterNb-checkpoint.ipynb, Untitled1-checkpoint.ipynb

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
"""A script that runs R from python, by use of a simple workflow"""

import subprocess

subprocess.Popen("Rscript --verbose TestR.R > ../Results/TestR.Rout 2> ../Results/TestR_errFile.Rout", shell=True).wait()**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.11726s

======================================================================
Inspecting script file regexs.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
"""Regular expressions in Python"""

import re

my_string = "a given string"

match = re.search(r'\s', my_string)
print(match)

match.group()

match = re.search(r'\d', my_string)
print(match)

MyStr = 'an example'
match = re.search(r'\w*\s', MyStr)
if match:
    print('found a match:', match.group())
else:
    print('did not find a match')

match = re.search(r'2', "it takes 2 to tango")
match.group()
match = re.search(r'\d', "it takes 2 to tango")
match.group()
match = re.search(r'\d.*', "it takes 2 to tango")
match.group()
match = re.search(r'\s\w{1,3}\s', 'once upon a time') #whitespce,word character 1-3 times,whitespace
match.group()
match = re.search(r'\s\w*$', 'once upon a time') #whitespace,any number of word characters - all only at the end of the string
match.group()

#more compact syntax to directly return the matched group
re.search(r'\w*\s\d.*\d', 'take 2 grams of H2O').group() #any number of word characters,whitespace,integer,any nmber of anything,integer
re.search(r'^\w*.*\s', 'once upon a time').group() #only at the start,any number of word character,any number of anything,whitespace
#Note that *, +, and { } are all "greedy": They repeat the previous 
#regex token as many times as possible.
#As a result, they may match more text than you want. To make it 
#non-greedy and terminate at the first found instance of a pattern, 
#use ?:
re.search(r'^\w*.*?\s', 'once upon a time').group() #only at the start,any number of word character,anything,whitespace 

re.search(r'<.+>', 'This is a <EM>first</EM> test').group() # the + is very greedy

re.search(r'<.+?>', 'This is a <EM>first</EM> test').group() #the ? makes the + lazy

re.search(r'\d*\.?\d*', '1432.75+60.22i').group() #any number of integers,dot,any number of integers

re.search(r'[AGTC]+', 'the sequence ATTCGT').group() #[] means to match any character listed

re.search(r'\s+[A-Z]\w+\s*\w+', "The bird-shit frog's name is Theloderma asper.").group() 
#whitespaceS,capital letter,word characters,whitespaces,word characters

#Finding an email address
MyStr = 'Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r"[\w\s]+,\s[\w\.@]+,\s[\w\s]+", MyStr) 
#Any combination of word characters and spaces,comma,space,any combination of word characters and dots and @s,comma,space,word characters and spaces
match.group()

#See if it works on a different type of email address
MyStr = 'Samraat Pawar, s-pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r"[\w\s]+,\s[\w\.@]+,\s[\w\s]+", MyStr)
match.group()
#Doesn't work..
#So you got to make it more robust
match = re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s&]+", MyStr)
match.group()

##Grouping regex patterns

MyStr = 'Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s&]+", MyStr)
match.group()

#without grouping the regex:
match.group(0)
#Now create groups using () :
match = re.search(r"([\w\s]+),\s([\w\.-]+@[\w\.-]+),\s([\w\s&]+)", MyStr)
if match:
    print(match.group(0))
    print(match.group(1))
    print(match.group(2))
    print(match.group(3))


##Finding all matches
MyStr = "Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory; Another academic, a-academic@imperial.ac.uk, Some other stuff thats equally boring; Yet another academic, y.a_academic@imperial.ac.uk, Some other stuff thats even more boring"

#Now re.findall() returns a list of all the emails found:
emails = re.findall(r"[\w\.-]+@[\w\.-]+", MyStr)
for email in emails:
    print(email)


##Finding in files
f = open("../Data/TestOaksData.csv", "r")
found_oaks = re.findall(r"Q[\w\s].*\s", f.read())
found_oaks
f.close()

##Groups within multiple matches. Grouping with ()
MyStr = "Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory; Another academic, a-academic@imperial.ac.uk, Some other stuff thats equally boring; Yet another academic, y.a_academic@imperial.ac.uk, Some other stuff thats even more boring"

found_matches = re.findall(r"([\w\s]+),\s([\w\.-]+@[\w\.-]+)", MyStr)
found_matches #In this case returns a list of tuples. Each tuple is each reg match

for item in found_matches:
    print(item)


##Extracting text from webpages
import urllib3

conn = urllib3.PoolManager() #open a connection
r = conn.request("GET", "https://www.imperial.ac.uk/silwood-park/academic-staff/")
webpage_html = r.data #read in the webpage's contents

type(webpage_html)
#This is returned as bytes and not strings, so we have to dcode it
My_Data = webpage_html.decode()
#print(My_Data)
#A lot of potentially useful information! Let's extract all the names of the academics
pattern = r"(Dr|Prof)\s+\w+\s+\w+"
regex = re.compile(pattern) #example use of re.compile(); you can also ignore case with re.IGNORECASE
for match in regex.finditer(My_Data):
    print(match.group())

##Replacing text
New_Data = re.sub(r'\t',' ', My_Data) #Replace all tabs with a space
print(New_Data)


**********************************************************************

Testing regexs.py...

regexs.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
<_sre.SRE_Match object; span=(1, 2), match=' '>
None
found a match: an 

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "regexs.py", line 64, in <module>
    match.group()
AttributeError: 'NoneType' object has no attribute 'group'

======================================================================
Inspecting script file profileme2.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
"""A script to show how to time the speeds of an improved profileme2.py script"""


def my_squares(iters):
    """A function that returns a list containing all the squared values
    of the elements between 1 and iters. In list comprehension format"""
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters, string):
    """A function that returns a string containing a recurring pattern
    of the value of string, followed by a comma, space, then string again, 
    for the number of times specified by iters. 
    E.g "My string", "My string" - 100000000 times."""
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x,y):
    """Function that defines the values of iters and string, 
    in the form of x and y, for the other functions"""
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")

# Type into ipython command line:
# run -p profileme2.py
# run -p -s cumtime profileme2.py  #This will do the profling and display the results sorted by cumtime**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 3.78107s

======================================================================
Inspecting script file timeitme.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
"""A script to time and compare speeds of the functions from 
profileme.py and profileme2.py. A method that is easy to use and 
easy to compare the speeds of functions.
This also illustrates how to use %timeit to do just this"""

#################################################################
# loops vs. list comprehensions: which is faster?
#################################################################

iters = 1000000

import timeit
from profileme import my_squares as my_squares_loops
from profileme2 import my_squares as my_squares_lc

# %timeit my_squares_loops(iters)      (can't use magic commands inside the script, must type in command line)
# %timeit my_squares_lc(iters)

#################################################################
# loops vs. the join method for strings: which is faster?
#################################################################

mystring = "my string"

from profileme import my_join as my_join_join
from profileme2 import my_join as my_join

# %timeit(my_join_join(iters, mystring))
# %timeit(my_join(iters, mystring))

#This is golden:) :)**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00691s

======================================================================
Inspecting script file blackbirds.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
"""A script showing how regular expressions can be used for text mining of files"""

import re
import scipy as sc 

# Read the file (using a different, more python 3 way, just for fun!)
with open('../Data/blackbirds.txt', 'r') as f:
    text = f.read()

# replace \t's and \n's with a spaces:
text = text.replace('\t',' ')
text = text.replace('\n',' ')
# You may want to make other changes to the text. 

# In particular, note that there are "strange characters" (these are accents and
# non-ascii symbols) because we don't care for them, first transform to ASCII:

text = text.encode('ascii', 'ignore') # first encode into ascii bytes
text = text.decode('ascii', 'ignore') # Now decode back to string

# Now extend this script so that it captures the Kingdom, Phylum and Species
# name for each species and prints it out to screen neatly.
KPS = []
K = re.findall(r"Kingdom\s\w+", text)
P = re.findall(r"Phylum\s\w+", text)
S = re.findall(r"Species\s\w+\s\w+", text)
KPS.append(K)
KPS.append(P)
KPS.append(S)
#print(KPS)
KPS2 = sc.array(KPS)
KPS2 = KPS2.transpose()
print(KPS2)
    
# Hint: you may want to use re.findall(my_reg, text)... Keep in mind that there
# are multiple ways to skin this cat! Your solution could involve multiple
# regular expression calls (easier!), or a single one (harder!)
**********************************************************************

Testing blackbirds.py...

blackbirds.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
[['Kingdom Animalia' 'Phylum Chordata' 'Species Euphagus carolinus']
 ['Kingdom Animalia' 'Phylum Chordata' 'Species Euphagus cyanocephalus']
 ['Kingdom Animalia' 'Phylum Chordata' 'Species Turdus boulboul']
 ['Kingdom Animalia' 'Phylum Chordata' 'Species Agelaius assimilis']]

**********************************************************************

Code ran without errors

Time consumed = 0.14624s

======================================================================
Inspecting script file LV1LV2Profiling.sh...

File contents are:
**********************************************************************
#!usr/bin/bash
###Prifling the two scripts: LV1.py and LV2.py, using bash

echo "Profiling the LV1.py script"
python3 -m cProfile LV1.py 

echo "Profiling the LV2.py script"
python3 -m cProfile LV2.py 





**********************************************************************

Testing LV1LV2Profiling.sh...

Output (only first 500 characters): 

**********************************************************************
Profiling the LV1.py script
         548130 function calls (537255 primitive calls) in 1.247 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
       36    0.000    0.000    0.002    0.000 <frozen importlib._bootstrap>:1043(__import__)
      684    0.003    0.000    0.003    0.000 <frozen importlib._bootstrap>:119(release)
      405    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:159(__init__)
      405    0.001    0.0
**********************************************************************

Code ran without errors

Time consumed = 2.42416s

======================================================================
Inspecting script file TestR.R...

File contents are:
**********************************************************************
print("Hello, this is R!")**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.10757s

======================================================================
Inspecting script file profileme.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
"""A script to show how to time the speed of the script"""

def my_squares(iters):
    """A function that returns a list containing all the squared values
    of the elements between 1 and iters. In loop format"""
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    """A function that returns a string containing a recurring pattern
    of the value of string, followed by a comma, space, then string again, 
    for the number of times specified by iters. 
    E.g "My string", "My string" - 100000000 times."""
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    """Function that defines the values of iters and string, 
    in the form of x and y, for the other functions"""
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000, "My string")

# Type into ipython command line:
# run -p profileme.py**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.68964s

======================================================================
Inspecting script file fmr.R...

File contents are:
**********************************************************************
# Plots log(field metabolic rate) against log(body mass) for the Nagy et al 
# 1999 dataset to a file fmr.pdf.

cat("Reading CSV\n")

nagy <- read.csv('../Data/NagyEtAl1999.csv', stringsAsFactors = FALSE)

cat("Creating graph\n")
pdf('../Results/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class], 
     xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
    model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
    abline(model, col=col[class])
}
dev.off()

cat("Finished in R!\n")
**********************************************************************

Testing fmr.R...

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Code ran without errors

Time consumed = 0.17370s

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is R!"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f020dd9dc88>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as p\n",
    "import scipy as sc\n",
    "\n",
    "x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
    "p.plot(x, y); p.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: ggplot2\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYwAAAEsCAMAAADn+3SWAAAC/VBMVEUAAAABAQECAgIDAwME\nBAQFBQUGBgYHBwcICAgJCQkKCgoLCwsMDAwNDQ0ODg4PDw8QEBARERESEhITExMUFBQVFRUW\nFhYXFxcYGBgZGRkaGhobGxscHBwdHR0eHh4fHx8gICAhISEiIiIjIyMkJCQlJSUmJiYnJyco\nKCgpKSkqKiorKyssLCwtLS0uLi4vLy8wMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6\nOjo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dISEhJSUlKSkpLS0tM\nTExNTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1e\nXl5fX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29w\ncHBxcXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGC\ngoKDg4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OU\nlJSVlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2fn5+goKChoaGioqKjo6OkpKSlpaWmpqan\np6eoqKipqamqqqqrq6usrKytra2urq6vr6+wsLCxsbGysrKzs7O0tLS1tbW2tra3t7e4uLi5\nubm6urq7u7u8vLy9vb2+vr6/v7/AwMDBwcHCwsLDw8PExMTFxcXGxsbHx8fIyMjJycnKysrL\ny8vMzMzNzc3Ozs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc3Nzd\n3d3e3t7f39/g4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u7u7v\n7+/w8PDx8fHy8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7////+IqX8\nAAAACXBIWXMAABJ0AAASdAHeZh94AAAVLUlEQVR4nO2de3wU1dnHn92EcBEwBKlgoYAKr4hI\nJaUvWq3i21YFAigoEiOC0MoLiKACXkAEmyrqC1hE8Ypoq6+ACtJUFIugCCoBwj1EEy4JuRxL\n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\nAAAAAElFTkSuQmCC",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "require(ggplot2)\n",
    "library(repr) #to resize plot within jupyter - this package is part of IRKernel\n",
    "options(repr.plot.width=3.3, repr.plot.height=2.5)\n",
    "\n",
    "x <- seq(0, 5, 0.1); y<- sin(x)\n",
    "qplot(x, y, geom = \"line\") #large figure"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file using_os.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
"""A script to obtain specifie lists of directories, sbdirectories 
and files from in the home directory using subprocess"""

# Use the subprocess.os module to get a list of files and directories 
# in your ubuntu home directory 

# Hint: look in subprocess.os and/or subprocess.os.path and/or 
# subprocess.os.walk for helpful functions

import subprocess

#################################
#~Get a list of files and 
#~directories in your home/ that start with an uppercase 'C'

# Type your code here:

import re

# Get the user's home directory.
home = subprocess.os.path.expanduser("~")

# Create a list to store the results.
FilesDirsStartingWithC = []

# Use a for loop to walk through the home directory.
for (dir, subdir, files) in subprocess.os.walk(home):
    FilesDirsStartingWithC.extend(re.findall(r"^C\w+", "".join(dir)))
    FilesDirsStartingWithC.extend(re.findall(r"^C\w+", "".join(subdir)))
    FilesDirsStartingWithC.extend(re.findall(r"^C\w+", "".join(files)))
print(FilesDirsStartingWithC)

  
#################################
# Get files and directories in your home/ that start with either an 
# upper or lower case 'C'

# Type your code here:
FilesDirsStartingWithCc = []

for (dir, subdir, files) in subprocess.os.walk(home):
    FilesDirsStartingWithCc.extend(re.findall(r"^C|c\w+", "".join(dir)))
    FilesDirsStartingWithCc.extend(re.findall(r"^C|c\w+", "".join(subdir)))
    FilesDirsStartingWithCc.extend(re.findall(r"^C|c\w+", "".join(files)))
print(FilesDirsStartingWithCc)

#################################
# Get only directories in your home/ that start with either an upper or 
#~lower case 'C' 

# Type your code here:
DirsStartingWithCc = []

for (dir, subdir, files) in subprocess.os.walk(home):
    DirsStartingWithCc.extend(re.findall(r"^C|c\w+", "".join(dir)))
    DirsStartingWithCc.extend(re.findall(r"^C|c\w+", "".join(subdir)))
print(DirsStartingWithCc)
**********************************************************************

Testing using_os.py...

using_os.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
['CommonHTMLSVG', 'Caligraphic', 'CONTRIBUTING', 'Changelog', 'ChangeLogpackage', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'Courier', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'CONTRIBUTING', 'ColdObservable', 'Changelog', 'ChangeLogpackage', 'ChangeLogpackage', 'ChangeLogpackage', 'ChangeLogpackage', 'CompatCo
**********************************************************************

Code ran without errors

Time consumed = 6.25061s

======================================================================
Inspecting script file LV1.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
"""A script that plots Lotka-Volterra model: a predator-prey system 
in 2D space"""

##Numerical intergration using scipy
import scipy.integrate as integrate
import scipy as sc

#The Lotka-Volterra model: a predator-prey system in 2D space

def dCR_dt(pops, t=0):
    """A function that returns the growth rate of consumer and resource population at any given time step"""
    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C
    dCdt = -z * C + e * a * R * C 

    return sc.array([dRdt, dCdt])

#C and R are consumer (e.g., predator) and resource (e.g., prey) 
#population abundance (either number × area−1 ), r is the intrinsic 
#(per-capita) growth rate of the resource population (time−1), a is
# per-capita "search rate" for the resource (area×time−1) 
#multiplied by its attack success probability, which determines the
# encounter and consumption rate of the consumer on the resource,
# z is mortality rate (time−1) and e is the consumer's efficiency 
#(a fraction) in converting resource to consumer biomass.

#type(dCR_dt)

#assigning parameter values to dCR_dt
r = 1.
a = 0.1
z = 1.5
e = 0.75

#Define the time vector; let's integrate from time point 0 to 15, using 1000 sub-divisions of time
t = sc.linspace(0, 15, 1000)

#Set the initial conditions for the two populations (10 resources
# and 5 consumers per unit area), and convert the two into an 
# array (because our dCR_dt function take an array as input)
R0 = 10
C0 = 5
RC0 = sc.array([R0, C0])

pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
#So pops contains the result (the population trajectories). Also 
#check what's in infodict (it's a dictionary with additional 
#information)

#type(infodict)
#infodict.keys()
#infodict['message'] #testing if it is successful

##Plotting in Python
import matplotlib.pylab as p 

f1 = p.figure() #Openning an empty figure object

p.plot(t, pops[:,0], 'g-', label = 'Resource density') #plot
p.plot(t, pops[:,1], 'b-', label = 'Consumer density') #plot
p.grid()
p.legend(loc='best')
p.xlabel('Time') 
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
#p.show() #To display the figure

f1.savefig('../Results/LV_model.pdf') #save figure

f2 = p.figure() #Openning a second empty figure
p.plot(pops[:,0], pops[:,1], 'r-') # plot
p.grid()
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')

f2.savefig('../Results/LV_model2.pdf')
**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.80702s

======================================================================
Inspecting script file DrawFW.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
"""A script to generate and plot a "synthetic" food web"""

import networkx as nx 
import scipy as sc 
import matplotlib.pylab as p

def GenRdmAdjList(N = 2, C = 0.5):
    """Generating a random adjacency list of consumers and resources"""
    Ids = range(N)
    ALst = []
    for i in Ids:
        if sc.random.uniform(0,1,1) < C: #if one number chosen in the uniform random distribution bewteen 0 and 1 is less then C, then this is used as the connectance probablity between the consumer and the resource
            Lnk = sc.random.choice(Ids,2).tolist() #creating a temporary variable Lnk, taking two random Ids, adding them to the list
            if Lnk[0] != Lnk[1]: #avoid self (e.g. cannibalistic) loops
                ALst.append(Lnk) 
    return ALst

MaxN = 30 #Assign the number of species
C = 0.75 #Assign concatenance probability

#Generate the adjacency list representing a random food web:
Adjl = sc.array(GenRdmAdjList(MaxN, C))
#Adjl
#The columns in this adjacency list refer to th consumer and resource ids respectively

#Creating the species node data
Sps = sc.unique(Adjl) #get species ids
#Sps

#Generating body sizes for the species. We use a log10 scale because
#species body sizes tend to e log-normally distributed
SizRan = ([-10, 10]) #use log10 scale
Sizs = sc.random.uniform(SizRan[0], SizRan[1], MaxN)
#Sizs

#Let's visualize the size distriution we have generated
p.hist(Sizs) #log10 scale

p.hist(10 ** Sizs) #raw scale

#Let's plot the network, with node sizes proportional to (log) body size
p.close('all') #close all open plot objects

#Let's use a circular configuration. For this we calculate the cordinates using networkx
pos = nx.circular_layout(Sps)

#Generate a networkx graph object
G = nx.Graph()
#Add the nodes and links
G.add_nodes_from(Sps)
G.add_edges_from(tuple(Adjl)) #Needs the adjacency list as a tuple
#Generate node sizes that are proportional to (log) body sizes
NodSizs = 1000 * (Sizs-min(Sizs))/(max(Sizs)-min(Sizs))
#Plot the graph
nx.draw_networkx(G, pos, node_size = NodSizs)

p.savefig("../Results/DrawFW.pdf")

**********************************************************************

Testing DrawFW.py...

DrawFW.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:522: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(edge_color) \
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:543: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if cb.is_string_like(edge_color) or len(edge_color) == 1:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:724: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(label):

======================================================================
Inspecting script file run_fmr_R.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
"""Runs fmr.R to generate the desired result and prints to the 
python screen whether the run was successful, and the contents of 
the R console output"""

import subprocess

###Running the R script and storing its output (stdout) and any error codes (stderr)
p = subprocess.Popen(["Rscript", "fmr.R"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = p.communicate()

###Telling us if the R script ran with no errors
if str(stderr) == "b''":
    print("This ran correctly with no errors")
else:
    print("This ran incorrectly with error/s")

###Printing the output from the R script
print(stdout.decode())**********************************************************************

Testing run_fmr_R.py...

run_fmr_R.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
This ran correctly with no errors
Reading CSV
Creating graph
null device 
          1 
Finished in R!


**********************************************************************

Code ran without errors

Time consumed = 0.20484s

======================================================================
Inspecting script file LV2.py...

File contents are:
**********************************************************************
#!usr/bin/env python3
"""A script that plots Lotka-Volterra model: a predator-prey system 
in 2D space"""

import sys
##Numerical intergration using scipy
import scipy.integrate as integrate
import scipy as sc

#The Lotka-Volterra model: a predator-prey system in 2D space

def dCR_dt(pops, t=0):
    """A function that returns the growth rate of consumer and resource population at any given time step"""
    R = pops[0]
    C = pops[1]
#    dRdt = r * R - a * R * C
    dRdt = r * R * (1 - R / K) - a * R * C

    dCdt = -z * C + e * a * R * C

    return sc.array([dRdt, dCdt])

#C and R are consumer (e.g., predator) and resource (e.g., prey) 
#population abundance (either number × area−1 ), r is the intrinsic 
#(per-capita) growth rate of the resource population (time−1), a is
# per-capita "search rate" for the resource (area×time−1) 
#multiplied by its attack success probability, which determines the
# encounter and consumption rate of the consumer on the resource,
# z is mortality rate (time−1) and e is the consumer's efficiency 
#(a fraction) in converting resource to consumer biomass.

#type(dCR_dt)

#assigning parameter values to dCR_dt with the command line
if len(sys.argv) == 5:
    r = float(sys.argv[1]) #1
    a = float(sys.argv[2]) #0.5
    z = float(sys.argv[3]) #1.5
    e = float(sys.argv[4]) #0.75
else:
    r = 1
    a = 0.5
    z = 1.5
    e = 0.75
    print("Default values are being used here")
K = 35


#Define the time vector; let's integrate from time point 0 to 15, using 1000 sub-divisions of time
t = sc.linspace(0, 15, 1000)

#Set the initial conditions for the two populations (10 resources
# and 5 consumers per unit area), and convert the two into an 
# array (because our dCR_dt function take an array as input)
R0 = 10
C0 = 5
RC0 = sc.array([R0, C0])

pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
#So pops contains the result (the population trajectories). Also 
#check what's in infodict (it's a dictionary with additional 
#information)

#type(infodict)
#infodict.keys()
#infodict['message'] #testing if it is successful

##Plotting in Python
import matplotlib.pylab as p 

f1 = p.figure() #Openning an empty figure object

p.plot(t, pops[:,0], 'g-', label = 'Resource density') #plot
p.plot(t, pops[:,1], 'b-', label = 'Consumer density') #plot
p.grid()
p.legend(loc='best')
p.xlabel('Time') 
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
p.text(17, 3, "Parameter values: \n r = %s \n a = %s \n z = %s \n e = %s" % (r, a, z, e), horizontalalignment = 'right')
#p.show() #To display the figure. Never run p.show in a script from command line

f1.savefig('../Results/LV2_model.pdf') #save figure

finalR = pops[-1, 0]
finalC = pops[-1, 1]
print("The final R is: %s" % (str(finalR)))
print("The final C is: %s" % (str(finalC)))


**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
Default values are being used here
The final R is: 2.07061157016
The final C is: 1.13869006034

**********************************************************************

Code ran without errors

Time consumed = 0.69423s

======================================================================
Inspecting script file MyFirstJupyterNb-checkpoint.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is R!"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f020dd9dc88>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as p\n",
    "import scipy as sc\n",
    "\n",
    "x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
    "p.plot(x, y); p.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: ggplot2\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYwAAAEsCAMAAADn+3SWAAAC/VBMVEUAAAABAQECAgIDAwME\nBAQFBQUGBgYHBwcICAgJCQkKCgoLCwsMDAwNDQ0ODg4PDw8QEBARERESEhITExMUFBQVFRUW\nFhYXFxcYGBgZGRkaGhobGxscHBwdHR0eHh4fHx8gICAhISEiIiIjIyMkJCQlJSUmJiYnJyco\nKCgpKSkqKiorKyssLCwtLS0uLi4vLy8wMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6\nOjo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dISEhJSUlKSkpLS0tM\nTExNTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1e\nXl5fX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29w\ncHBxcXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGC\ngoKDg4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OU\nlJSVlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2fn5+goKChoaGioqKjo6OkpKSlpaWmpqan\np6eoqKipqamqqqqrq6usrKytra2urq6vr6+wsLCxsbGysrKzs7O0tLS1tbW2tra3t7e4uLi5\nubm6urq7u7u8vLy9vb2+vr6/v7/AwMDBwcHCwsLDw8PExMTFxcXGxsbHx8fIyMjJycnKysrL\ny8vMzMzNzc3Ozs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc3Nzd\n3d3e3t7f39/g4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u7u7v\n7+/w8PDx8fHy8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7////+IqX8\nAAAACXBIWXMAABJ0AAASdAHeZh94AAAVLUlEQVR4nO2de3wU1dnHn92EcBEwBKlgoYAKr4hI\nJaUvWq3i21YFAigoEiOC0MoLiKACXkAEmyrqC1hE8Ypoq6+ACtJUFIugCCoBwj1EEy4JuRxL\n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\nAAAAAElFTkSuQmCC",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "require(ggplot2)\n",
    "library(repr) #to resize plot within jupyter - this package is part of IRKernel\n",
    "options(repr.plot.width=3.3, repr.plot.height=2.5)\n",
    "\n",
    "x <- seq(0, 5, 0.1); y<- sin(x)\n",
    "qplot(x, y, geom = \"line\") #large figure"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MyFirstJupyterNb-checkpoint.ipynb...

======================================================================
Inspecting script file Untitled1-checkpoint.ipynb...

File contents are:
**********************************************************************
{
 "cells": [],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing Untitled1-checkpoint.ipynb...

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!