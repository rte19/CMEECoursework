getwd()
setwd("Documents/CMEECoursework/Week3/Code/")
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header=F, stringsAsFactors = F))
MyMetaData <- as.matrix(read.csv("../Data/PoundHillMetaData.csv",header=F, stringsAsFactors = F))
class(MyData)
MyMetaData <- as.matrix(read.csv("../Data/PoundHillMetaData.csv",header=T, stringsAsFactors = F))
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header=F, stringsAsFactors = F))
MyMetaData <- as.matrix(read.csv("../Data/PoundHillMetaData.csv",header=T, stringsAsFactors = F))
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header=T, stringsAsFactors = F)
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv", header = T, sep = ";", stringsAsFactors = F)
rscript a<-T
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
install.packages(reshape2)
?melt #check out the melt function
?melt
install.packages("reshape2")
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
?melt #check out the melt function
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
MyMetaData
MyWrangledData
install.packages("dplyr")
require(dplyr)
dplyr::tbl_df(MyWrangledData)
dplyr::filter(MyWrangledData, Count > 100)
dplyr::slice(MyWrangledData, 10:15)
library(dplyr)
############# Inspect the dataset ###############
#Using dplyr and tidyr
dplyr::glimpse(MyData)
dim(MyData)
dplyr::count(MyData)
##Doing a linear regression model analysis
x <- c(1, 2, 3, 4, 8)
y <- c(4, 3, 5, 7, 9)
?lm
model1 <- lm(y~x)
model1
model1$residuals
model1$fitted.values
summary(model1)
anova(model1)
resid(model1)
cov(x,y)
var(x,y)
plot(y~x)
abline(y~x)
abline(y~x)
abline(model1)
Data <- read.table("SparrowSize.txt", header=TRUE) #Reding in the data
getwd()
setwd("~/Documents/statistics_in_R/")
Data <- read.table("SparrowSize.txt", header=TRUE) #Reding in the data
require(dplyr)
dplyr::glimpse(Data)
Data
dplyr::slice(Data, 0:10)
plot(Data$Bill, Data$Mass)
Data[Data == NA] = 0
Data[Data == is.NA] = 0
Data <- read.table("SparrowSize.txt", header=TRUE) #Reding in the data
require(dplyr)
dplyr::slice(Data, 0:10)
plot(Data$Bill, Data$Mass)
Model1 <- lm(Data$Mass~Data$Bill)
Model1
summary(Model1)
install.packages("tidyr")
Data <- read.table("SparrowSize.txt", header=TRUE) #Reding in the data
require(dplyr)
dplyr::slice(Data, 0:10)
require(tidyr)
Data2 <- drop_na(Data)
dyplr::slice(Data2, 0:10)
require(dplyr)
dyplr::slice(Data2, 0:10)
require(tidyr)
Data2 <- drop_na(Data)
#require(dplyr)
dplyr::slice(Data2, 0:10)
plot(Data2$Bill, Data2$Mass)
model1 <- lm(Data2$Bill, Data2$Mass)
model1 <- lm(Data2$Mass~Data2$Bill)
plot(Data2$Bill, Data2$Mass)
abline(model1)
summary(model1)
install.packages("maps")
load("../Data/GPDDFiltered.RData")
getwd()
setwd("../CMEECoursework/Week3/Code/")
load("../Data/GPDDFiltered.RData")
library(maps)
map(database = "world", regions = ".")
points(gpdd$long, gpdd$lat, pch = 16, col = "green", cex = 1)
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF)
#dim(MyDF)
head(MyDF)
require(lattice)
library(lattice)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
densityplot(~log(Prey.mas) | Type.of.feeding.interaction, data=MyDF)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data=MyDF)
densityplot(~log(Predator.mss/Prey.mass) | Type.of.feeding.interaction, data=MyDF)
densityplot(~log(Predator.mass/Prey.mass) | Type.of.feeding.interaction, data=MyDF)
MyDF
MeanPredatorMass <- log(tapply(X = MyDF$Predator.mass, INDEX = MyDF$Type.of.feeding.interaction, FUN = mean))
paste(MeanPredatorMass)
MedianPredatorMass <- log(tapply(X = MyDF$Predator.mass, INDEX = MyDF$Type.of.feeding.interaction, FUN = median))
MeanPreyMass <- log(tapply(X = MyDF$Prey.mass, INDEX = MyDF$Type.of.feeding.interaction, FUN = mean))
MedianPreyMass <- log(tapply(X = MyDF$Prey.mass, INDEX = MyDF$Type.of.feeding.interaction, FUN = median))
SizeRatio <- MyDF$Predator.mass/MyDF$Prey.mass
MeanSizeRatio <- log(tapply(X = MyDF$Predator.mass/MyDF$Prey.mass, INDEX = MyDF$Type.of.feeding.interaction, FUN = mean))
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
library(lattice)
pdf("../Results/Pred_Lattice.pdf")
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()
pdf("../Results/Prey_Lattice.pdf")
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()
pdf("../Results/SizeRatio_Lattice.pdf")
densityplot(~log(Prey.mass/Predator.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()
MeanPredatorMass <- log(tapply(X = MyDF$Predator.mass, INDEX = MyDF$Type.of.feeding.interaction, FUN = mean))
MedianPredatorMass <- log(tapply(X = MyDF$Predator.mass, INDEX = MyDF$Type.of.feeding.interaction, FUN = median))
MeanPreyMass <- log(tapply(X = MyDF$Prey.mass, INDEX = MyDF$Type.of.feeding.interaction, FUN = mean))
MedianPreyMass <- log(tapply(X = MyDF$Prey.mass, INDEX = MyDF$Type.of.feeding.interaction, FUN = median))
MeanSizeRatio <- log(tapply(X = MyDF$Prey.mass/MyDF$Predator.mass, INDEX = MyDF$Type.of.feeding.interaction, FUN = mean))
MedianSizeRatio <- log(tapply(X = MyDF$Prey.mass/MyDF$Predator.mass, INDEX = MyDF$Type.of.feeding.interaction, FUN = median))
